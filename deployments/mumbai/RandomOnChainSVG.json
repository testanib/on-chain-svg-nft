{
  "address": "0xaF0d149Af20EABBC7F73DdE7a4F4c1380BD8b764",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_VRFCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_LinkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "createdRandomSVG",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "name": "createdUnfinishedSVG",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "requestedRandomSVG",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_recipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "colors",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "create",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numTokens",
          "type": "uint256"
        }
      ],
      "name": "createtBatch",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "devMint",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "finishMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_firstTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastTokenId",
          "type": "uint256"
        }
      ],
      "name": "finishMintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        }
      ],
      "name": "formatTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPathCommands",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPaths",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pathCommands",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setVRFFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "name": "svgToImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f17093f3da35d2bcfd435b75e2b224ba0388ce69b26d907c1b0cd23e2ffc011",
  "receipt": {
    "to": null,
    "from": "0x59A520Fe90a55574011EC23407a5193526B67c9b",
    "contractAddress": "0xaF0d149Af20EABBC7F73DdE7a4F4c1380BD8b764",
    "transactionIndex": 0,
    "gasUsed": "5547044",
    "logsBloom": "0x
    "blockHash": "0x40e2c9b661106c4ef9f88a28ab58ecb8c458da730e91c544df8a0f70c428dc96",
    "transactionHash": "0x0f17093f3da35d2bcfd435b75e2b224ba0388ce69b26d907c1b0cd23e2ffc011",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24646046,
        "transactionHash": "0x0f17093f3da35d2bcfd435b75e2b224ba0388ce69b26d907c1b0cd23e2ffc011",
        "address": "0xaF0d149Af20EABBC7F73DdE7a4F4c1380BD8b764",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000059a520fe90a55574011ec23407a5193526b67c9b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x40e2c9b661106c4ef9f88a28ab58ecb8c458da730e91c544df8a0f70c428dc96"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 24646046,
        "transactionHash": "0x0f17093f3da35d2bcfd435b75e2b224ba0388ce69b26d907c1b0cd23e2ffc011",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000059a520fe90a55574011ec23407a5193526b67c9b",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000276a03a35f0abc0000000000000000000000000000000000000000000000000a3b761ee12b207a00000000000000000000000000000000000000000000064d8612e269ced4fb3c0000000000000000000000000000000000000000000000000a140c1b3dcc15be00000000000000000000000000000000000000000000064d863a4c6d723405f8",
        "logIndex": 1,
        "blockHash": "0x40e2c9b661106c4ef9f88a28ab58ecb8c458da730e91c544df8a0f70c428dc96"
      }
    ],
    "blockNumber": 24646046,
    "cumulativeGasUsed": "5547044",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",
    "100000000000000"
  ],
  "numDeployments": 7,
  "solcInputHash": "7fc9d75843a27f055a8fe1aa6d6f2a04",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VRFCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LinkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"createdRandomSVG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"createdUnfinishedSVG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"requestedRandomSVG\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"createtBatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"finishMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastTokenId\",\"type\":\"uint256\"}],\"name\":\"finishMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"}],\"name\":\"formatTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPathCommands\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPaths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathCommands\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setVRFFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"name\":\"svgToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"requestedRandomSVG(bytes32,uint256)\":{\"details\":\"indexed values are treated as log topics instead of raw data.Allows you to search for specific events rather than parsing the entire log.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Constructor\",\"params\":{\"_LinkToken\":\"address of the Link token\",\"_VRFCoordinator\":\"address of the VRF coordinator\",\"_fee\":\"uint256 \",\"_keyHash\":\"bytes32 \"}},\"create()\":{\"details\":\"Requests ChainLink VRF number and maps the id Technically this is the NFT\"},\"createtBatch(uint256)\":{\"details\":\"Mint multiple NFTs Can potentially be optimized with ERC721A but this contract is already at its size limit\"},\"finishMint(uint256)\":{\"details\":\"Savs generated SVG info to the blockchain\",\"params\":{\"_tokenId\":\"Token ID Requires:    - tokenId is a valid token ID   - tokenIdToRandomNumber[tokenId] is a valid random number   - tokenCounter is greater than tokenId\"}},\"formatTokenURI(string)\":{\"details\":\"Converts image URI to token URI\",\"params\":{\"imageURI\":\"image URI string\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"ERC2981 Royalty Token Interface\",\"params\":{\"_salePrice\":\"uint256 Sale price\",\"_tokenId\":\"uint256 Token ID\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"svgToImageURI(string)\":{\"details\":\"Converts SVG to image URI with base64 encoding\",\"params\":{\"svg\":\"SVG string\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw()\":{\"details\":\"allows the owner to withdraw funds\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setVRFFee(uint256)\":{\"notice\":\"Function to handle changing the VRF coordinator fee\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomOnChainSVG.sol\":\"RandomOnChainSVG\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x778c9d88cd6d94ae866c1c3f5fec6022f07e39280d3b6d581c8cceb8a5ac4b1e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x40cc76b7f62d20c90b3a18479ad0b1d20de7b2cc665cb3d7585362403651e62a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/RandomOnChainSVG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\n\\r\\n\\r\\ncontract RandomOnChainSVG is ERC721URIStorage, IERC2981, VRFConsumerBase, Ownable {\\r\\n    bytes32 public keyHash;\\r\\n    uint256 public fee;\\r\\n    uint256 public tokenCounter;\\r\\n    uint256 public price = 10000000000000000; // .01 ETH\\r\\n    address public _recipient;\\r\\n    uint256 public maxAmount = 50;\\r\\n\\r\\n    //SVG Params\\r\\n    uint256 public immutable maxPaths = 20;\\r\\n    uint256 public immutable maxPathCommands = 10;\\r\\n    uint256 public immutable size = 1000;\\r\\n    string[] public pathCommands = [\\\"M\\\", \\\"L\\\"];\\r\\n    string[] public colors = [\\\"red\\\", \\\"green\\\", \\\"blue\\\", \\\"black\\\", \\\"purple\\\", \\\"orange\\\", \\\"brown\\\", \\\"magenta\\\"];\\r\\n\\r\\n    mapping(bytes32 => address) internal requestIdToSender;\\r\\n    mapping(bytes32 => uint256) internal requestIdToTokenId;\\r\\n    mapping(uint256 => uint256) internal tokenIdToRandomNumber;\\r\\n    mapping(uint256 => address) internal tokenIdToRecipient;\\r\\n\\r\\n    /**\\r\\n     * @dev indexed values are treated as log topics instead of raw data.\\r\\n     * @dev Allows you to search for specific events rather than parsing the entire log.\\r\\n     */\\r\\n    event requestedRandomSVG(bytes32 indexed requestId, uint256 indexed tokenId);\\r\\n    event createdUnfinishedSVG(uint256 indexed tokenId, uint256 indexed randomNumber);\\r\\n    event createdRandomSVG(uint256 indexed tokenId, string tokenURI);\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev Constructor\\r\\n        * @param _VRFCoordinator address of the VRF coordinator\\r\\n        * @param _LinkToken address of the Link token\\r\\n        * @param _keyHash bytes32 \\r\\n        * @param _fee uint256 \\r\\n     */\\r\\n    constructor(address _VRFCoordinator, address _LinkToken, bytes32 _keyHash, uint256 _fee) \\r\\n    VRFConsumerBase(_VRFCoordinator, _LinkToken)\\r\\n    ERC721(\\\"RandomOnChainSVG\\\", \\\"ROSVG\\\")\\r\\n    {\\r\\n        keyHash = _keyHash;\\r\\n        fee = _fee;\\r\\n        tokenCounter = 0;\\r\\n        _recipient = owner();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        Modifier to handle require statements for minting\\r\\n     */\\r\\n    modifier mintCompliance(uint256 value, uint256 numTokens) {\\r\\n        require(msg.value >= price * numTokens, \\\"Insufficient funds\\\");\\r\\n        require(tokenCounter + numTokens <= maxAmount, \\\"Cannot exceed max amount\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        Function to handle changing the VRF coordinator fee\\r\\n     */\\r\\n    function setVRFFee(uint256 _fee) public onlyOwner {\\r\\n        fee = _fee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev allows the owner to withdraw funds\\r\\n     */\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev Requests ChainLink VRF number and maps the id\\r\\n        * Technically this is the NFT\\r\\n     */\\r\\n    function create() public payable mintCompliance(msg.value, 1) returns (bytes32 requestId){\\r\\n        requestId = requestRandomness(keyHash, fee);\\r\\n        requestIdToSender[requestId] = msg.sender;\\r\\n        uint256 tokenId = tokenCounter; \\r\\n        requestIdToTokenId[requestId] = tokenId;\\r\\n        tokenCounter = tokenCounter + 1;\\r\\n        tokenIdToRecipient[tokenId] = msg.sender;\\r\\n        emit requestedRandomSVG(requestId, tokenId);\\r\\n    }\\r\\n\\r\\n    function devMint(uint256 quantity) external onlyOwner returns(bytes32 requestId){\\r\\n        for (uint256 i = 0; i < quantity; i++) {\\r\\n            requestId = requestRandomness(keyHash, fee);\\r\\n            requestIdToSender[requestId] = msg.sender;\\r\\n            uint256 tokenId = tokenCounter; \\r\\n            requestIdToTokenId[requestId] = tokenId;\\r\\n            tokenCounter = tokenCounter + 1;\\r\\n            tokenIdToRecipient[tokenId] = msg.sender;\\r\\n            emit requestedRandomSVG(requestId, tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev Mint multiple NFTs\\r\\n        * Can potentially be optimized with ERC721A but this contract is already at its size limit\\r\\n     */\\r\\n    function createtBatch(uint256 numTokens) public payable mintCompliance(msg.value, numTokens) returns (bytes32 requestId){\\r\\n        require(numTokens > 1 && numTokens < 10,\\\"Invalid Mint Batch Mint Amount\\\");\\r\\n        for (uint256 i; i < numTokens; i++) {\\r\\n            create();\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /** \\r\\n        * @dev Overriden fulfillRandomness function to fulfill the request\\r\\n        * @param requestId VRF request ID\\r\\n        * @param randomNumber VRF random number\\r\\n     */\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomNumber) internal override {\\r\\n        address sender = requestIdToSender[requestId];\\r\\n        uint256 tokenId = requestIdToTokenId[requestId];\\r\\n        _safeMint(sender, tokenId);\\r\\n        tokenIdToRandomNumber[tokenId] = randomNumber;\\r\\n        emit createdUnfinishedSVG(tokenId, randomNumber);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev Savs generated SVG info to the blockchain\\r\\n        * @param _tokenId Token ID\\r\\n        * Requires: \\r\\n        *   - tokenId is a valid token ID\\r\\n        *   - tokenIdToRandomNumber[tokenId] is a valid random number\\r\\n        *   - tokenCounter is greater than tokenId\\r\\n     */\\r\\n    function finishMint(uint256 _tokenId) public {\\r\\n        require(bytes(tokenURI(_tokenId)).length <= 0, \\\"tokenURI is already set\\\");\\r\\n        require(tokenCounter > _tokenId, \\\"tokenId is not valid\\\");\\r\\n        require(tokenIdToRandomNumber[_tokenId] > 0, \\\"need to wait for ChainLink VRF\\\");\\r\\n        require(tokenIdToRecipient[_tokenId] == msg.sender, \\\"Only the recipient can finish minting\\\");\\r\\n        uint256 randomNumber = tokenIdToRandomNumber[_tokenId];\\r\\n        string memory svg = generateSVG(randomNumber);\\r\\n        string memory imageURI = svgToImageURI(svg);\\r\\n        _setTokenURI(_tokenId, formatTokenURI(imageURI));\\r\\n        emit createdRandomSVG(_tokenId, svg);\\r\\n    }\\r\\n\\r\\n\\r\\n    //Same as above but for batch minting\\r\\n    function finishMintBatch(uint256 _firstTokenId, uint256 _lastTokenId) public {\\r\\n        require(_lastTokenId >= _firstTokenId, \\\"lastTokenId must be greater than firstTokenId\\\");\\r\\n        for(_firstTokenId; _firstTokenId < _lastTokenId; _firstTokenId++) {\\r\\n            finishMint(_firstTokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev Generates SVG outline and calls generatePath to generate each path for the SVG\\r\\n        * @param _randomNumber VRF random number\\r\\n     */\\r\\n    function generateSVG(uint256 _randomNumber) internal view returns (string memory svg) {\\r\\n        uint256 numPaths = (_randomNumber % maxPaths) + 1;\\r\\n        svg = string(abi.encodePacked(\\\"<svg xmlns='http://www.w3.org/2000/svg' height='\\\", uint2str(size), \\\"' width='\\\", uint2str(size), \\\"'>\\\"));\\r\\n        for (uint256 i = 0; i < numPaths; i++) {\\r\\n            string memory pathSVG = generatePath(uint256(keccak256(abi.encodePacked(_randomNumber, i))));\\r\\n            svg = string(abi.encodePacked(svg, pathSVG));\\r\\n        }\\r\\n        svg = string(abi.encodePacked(svg, \\\"</svg>\\\"));\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev Loops calling generateCommand to generate each path command for the SVG\\r\\n        * @param _randomNumber VRF random number\\r\\n     */\\r\\n    function generatePath(uint256 _randomNumber) internal view returns (string memory pathSvg){\\r\\n        uint256 numCommands = (_randomNumber % maxPathCommands) + 1;\\r\\n        pathSvg = \\\"<path d='\\\";\\r\\n        for (uint256 j = 0; j < numCommands; j++) {\\r\\n            string memory command = generateCommand(uint256(keccak256(abi.encodePacked(_randomNumber, size + j))));\\r\\n            pathSvg = string(abi.encodePacked(pathSvg, command));\\r\\n            \\r\\n        }\\r\\n        string memory color = colors[_randomNumber % colors.length];\\r\\n        pathSvg = string(abi.encodePacked(pathSvg, \\\"' fill='transparent' stroke='\\\", color,\\\"'/>\\\"));\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev Generates a single random path command using all path options\\r\\n        * @param _randomNumber VRF random number\\r\\n     */\\r\\n    function generateCommand(uint256 _randomNumber) internal view returns (string memory command){\\r\\n        command = pathCommands[_randomNumber % pathCommands.length];\\r\\n        uint256 parameterOne = uint256(keccak256(abi.encode(_randomNumber, size * 2))) % size;\\r\\n        uint256 parameterTwo = uint256(keccak256(abi.encode(_randomNumber, size * 2 + 1))) % size;\\r\\n        command = string(abi.encodePacked(command, \\\" \\\", uint2str(parameterOne), \\\" \\\", uint2str(parameterTwo)));\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev Converts SVG to image URI with base64 encoding\\r\\n        * @param svg SVG string\\r\\n     */\\r\\n    function svgToImageURI(string memory svg) public pure returns (string memory) {\\r\\n        return string(abi.encodePacked(\\\"data:image/svg+xml;base64,\\\",Base64.encode(bytes(string(abi.encodePacked(svg))))));\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev Converts image URI to token URI\\r\\n        * @param imageURI image URI string\\r\\n     */\\r\\n    function formatTokenURI(string memory imageURI) public pure returns (string memory) {\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\",Base64.encode(bytes(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"name\\\":\\\"', \\\"Random Generated On-Chain SVG\\\",'\\\", \\\"description\\\":\\\"An NFT based on an SVG that was generated randomly with the help of ChainLink VRF!\\\", \\\"attributes\\\":\\\"\\\", \\\"image\\\":\\\"',imageURI,'\\\"}'\\r\\n            ))))\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev Converts uint to a string\\r\\n        * @param _i uint to be converted\\r\\n     */\\r\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k-1;\\r\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev ERC2981 Royalty Token Interface\\r\\n        * @param _tokenId uint256 Token ID\\r\\n        * @param _salePrice uint256 Sale price\\r\\n     */\\r\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view override returns (address receiver, uint256 royaltyAmount) {\\r\\n        return (_recipient, (_salePrice * 1000) / 10000);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, IERC165) returns (bool){\\r\\n        return (interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId));\\r\\n    }\\r\\n\\r\\n    //can be replaced with counters.sol counters\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n      return tokenCounter;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view virtual override(ERC721URIStorage) returns (string memory) {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x94253ac755d4168dcab26082b6b70f0b41ae1953d12b53d45b704be97f2533cc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102305760003560e01c806371aee1931161012e578063b88d4fde116100ab578063ddca3f431161006f578063ddca3f4314610870578063df9bcd241461089b578063e985e9c5146108c6578063efc81a8c14610903578063f2fde38b1461092157610230565b8063b88d4fde14610777578063bd11f69d146107a0578063c87b56dd146107dd578063d082e3811461081a578063d4cca5f11461084557610230565b806395d89b41116100f257806395d89b411461069f5780639a365b87146106ca578063a035b1fe146106fa578063a22cb46514610725578063b82361c61461074e57610230565b806371aee193146105a65780638da5cb5b146105e357806394985ddd1461060e578063949d225d14610637578063955968d41461066257610230565b806330da44cb116101bc57806361728f391161018057806361728f39146104c1578063624194c7146104ec5780636352211e1461051557806370a0823114610552578063715018a61461058f57610230565b806330da44cb146103fd578063375a069a146104265780633ccfd60b1461046357806342842e0e1461046d5780635f48f3931461049657610230565b8063095ea7b311610203578063095ea7b31461030557806318160ddd1461032e57806323b872dd146103595780632a55205a1461038257806330d871c6146103c057610230565b806301f920c61461023557806301ffc9a71461026057806306fdde031461029d578063081812fc146102c8575b600080fd5b34801561024157600080fd5b5061024a61094a565b6040516102579190614bc7565b60405180910390f35b34801561026c57600080fd5b5061028760048036038101906102829190613d54565b61096e565b60405161029491906147a1565b60405180910390f35b3480156102a957600080fd5b506102b26109e8565b6040516102bf9190614845565b60405180910390f35b3480156102d457600080fd5b506102ef60048036038101906102ea9190613de7565b610a7a565b6040516102fc91906146d3565b60405180910390f35b34801561031157600080fd5b5061032c60048036038101906103279190613cb3565b610aff565b005b34801561033a57600080fd5b50610343610c17565b6040516103509190614bc7565b60405180910390f35b34801561036557600080fd5b50610380600480360381019061037b9190613bad565b610c21565b005b34801561038e57600080fd5b506103a960048036038101906103a49190613e10565b610c81565b6040516103b792919061473a565b60405180910390f35b3480156103cc57600080fd5b506103e760048036038101906103e29190613da6565b610ccd565b6040516103f49190614845565b60405180910390f35b34801561040957600080fd5b50610424600480360381019061041f9190613de7565b610d1d565b005b34801561043257600080fd5b5061044d60048036038101906104489190613de7565b610da3565b60405161045a91906147bc565b60405180910390f35b61046b610f5c565b005b34801561047957600080fd5b50610494600480360381019061048f9190613bad565b611028565b005b3480156104a257600080fd5b506104ab611048565b6040516104b89190614bc7565b60405180910390f35b3480156104cd57600080fd5b506104d661104e565b6040516104e391906147bc565b60405180910390f35b3480156104f857600080fd5b50610513600480360381019061050e9190613de7565b611054565b005b34801561052157600080fd5b5061053c60048036038101906105379190613de7565b61125e565b60405161054991906146d3565b60405180910390f35b34801561055e57600080fd5b5061057960048036038101906105749190613b48565b611310565b6040516105869190614bc7565b60405180910390f35b34801561059b57600080fd5b506105a46113c8565b005b3480156105b257600080fd5b506105cd60048036038101906105c89190613da6565b611450565b6040516105da9190614845565b60405180910390f35b3480156105ef57600080fd5b506105f86114a0565b60405161060591906146d3565b60405180910390f35b34801561061a57600080fd5b5061063560048036038101906106309190613d18565b6114ca565b005b34801561064357600080fd5b5061064c611566565b6040516106599190614bc7565b60405180910390f35b34801561066e57600080fd5b5061068960048036038101906106849190613de7565b61158a565b6040516106969190614845565b60405180910390f35b3480156106ab57600080fd5b506106b4611636565b6040516106c19190614845565b60405180910390f35b6106e460048036038101906106df9190613de7565b6116c8565b6040516106f191906147bc565b60405180910390f35b34801561070657600080fd5b5061070f6117ec565b60405161071c9190614bc7565b60405180910390f35b34801561073157600080fd5b5061074c60048036038101906107479190613c77565b6117f2565b005b34801561075a57600080fd5b5061077560048036038101906107709190613e10565b611808565b005b34801561078357600080fd5b5061079e60048036038101906107999190613bfc565b611874565b005b3480156107ac57600080fd5b506107c760048036038101906107c29190613de7565b6118d6565b6040516107d49190614845565b60405180910390f35b3480156107e957600080fd5b5061080460048036038101906107ff9190613de7565b611982565b6040516108119190614845565b60405180910390f35b34801561082657600080fd5b5061082f611994565b60405161083c9190614bc7565b60405180910390f35b34801561085157600080fd5b5061085a61199a565b60405161086791906146d3565b60405180910390f35b34801561087c57600080fd5b506108856119c0565b6040516108929190614bc7565b60405180910390f35b3480156108a757600080fd5b506108b06119c6565b6040516108bd9190614bc7565b60405180910390f35b3480156108d257600080fd5b506108ed60048036038101906108e89190613b71565b6119ea565b6040516108fa91906147a1565b60405180910390f35b61090b611a7e565b60405161091891906147bc565b60405180910390f35b34801561092d57600080fd5b5061094860048036038101906109439190613b48565b611c41565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109e157506109e082611d39565b5b9050919050565b6060600080546109f790614eee565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2390614eee565b8015610a705780601f10610a4557610100808354040283529160200191610a70565b820191906000526020600020905b815481529060010190602001808311610a5357829003601f168201915b5050505050905090565b6000610a8582611e1b565b610ac4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abb90614ac7565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b0a8261125e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7290614b67565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b9a611e87565b73ffffffffffffffffffffffffffffffffffffffff161480610bc95750610bc881610bc3611e87565b6119ea565b5b610c08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bff906149e7565b60405180910390fd5b610c128383611e8f565b505050565b6000600b54905090565b610c32610c2c611e87565b82611f48565b610c71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6890614b87565b60405180910390fd5b610c7c838383612026565b505050565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166127106103e885610cb89190614d93565b610cc29190614d62565b915091509250929050565b6060610cf782604051602001610ce391906144fd565b604051602081830303815290604052612282565b604051602001610d079190614685565b6040516020818303038152906040529050919050565b610d25611e87565b73ffffffffffffffffffffffffffffffffffffffff16610d436114a0565b73ffffffffffffffffffffffffffffffffffffffff1614610d99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9090614ae7565b60405180910390fd5b80600a8190555050565b6000610dad611e87565b73ffffffffffffffffffffffffffffffffffffffff16610dcb6114a0565b73ffffffffffffffffffffffffffffffffffffffff1614610e21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1890614ae7565b60405180910390fd5b60005b82811015610f5657610e3a600954600a54612421565b9150336011600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600b5490508060126000858152602001908152602001600020819055506001600b54610ebc9190614cd5565b600b81905550336014600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080837fb97343f1f2afc4959f818046ccae28fd7b05fcd2b7a7dc651cbb52a096cae03560405160405180910390a3508080610f4e90614f51565b915050610e24565b50919050565b610f64611e87565b73ffffffffffffffffffffffffffffffffffffffff16610f826114a0565b73ffffffffffffffffffffffffffffffffffffffff1614610fd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcf90614ae7565b60405180910390fd5b610fe06114a0565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015611025573d6000803e3d6000fd5b50565b61104383838360405180602001604052806000815250611874565b505050565b600e5481565b60095481565b600061105f82611982565b5111156110a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109890614967565b60405180910390fd5b80600b54116110e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110dc90614867565b60405180910390fd5b600060136000838152602001908152602001600020541161113b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113290614987565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166014600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d390614887565b60405180910390fd5b60006013600083815260200190815260200160002054905060006111ff82612583565b9050600061120c82610ccd565b90506112208461121b83611450565b6126d9565b837fb662a5131fe3646dc05ebcc07180161553152610daffb7bb78df70229f0fbe2a836040516112509190614845565b60405180910390a250505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611307576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fe90614a27565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137890614a07565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6113d0611e87565b73ffffffffffffffffffffffffffffffffffffffff166113ee6114a0565b73ffffffffffffffffffffffffffffffffffffffff1614611444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143b90614ae7565b60405180910390fd5b61144e600061274d565b565b606061147a8260405160200161146691906145db565b604051602081830303815290604052612282565b60405160200161148a9190614663565b6040516020818303038152906040529050919050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154f90614b47565b60405180910390fd5b6115628282612813565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600f818154811061159a57600080fd5b9060005260206000200160009150905080546115b590614eee565b80601f01602080910402602001604051908101604052809291908181526020018280546115e190614eee565b801561162e5780601f106116035761010080835404028352916020019161162e565b820191906000526020600020905b81548152906001019060200180831161161157829003601f168201915b505050505081565b60606001805461164590614eee565b80601f016020809104026020016040519081016040528092919081815260200182805461167190614eee565b80156116be5780601f10611693576101008083540402835291602001916116be565b820191906000526020600020905b8154815290600101906020018083116116a157829003601f168201915b5050505050905090565b6000348280600c546116da9190614d93565b34101561171c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611713906149c7565b60405180910390fd5b600e5481600b5461172d9190614cd5565b111561176e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176590614907565b60405180910390fd5b60018411801561177e5750600a84105b6117bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b490614ba7565b60405180910390fd5b60005b848110156117e4576117d0611a7e565b5080806117dc90614f51565b9150506117c0565b505050919050565b600c5481565b6118046117fd611e87565b83836128b9565b5050565b8181101561184b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184290614a67565b60405180910390fd5b5b808210156118705761185d82611054565b818061186890614f51565b92505061184c565b5050565b61188561187f611e87565b83611f48565b6118c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118bb90614b87565b60405180910390fd5b6118d084848484612a26565b50505050565b601081815481106118e657600080fd5b90600052602060002001600091509050805461190190614eee565b80601f016020809104026020016040519081016040528092919081815260200182805461192d90614eee565b801561197a5780601f1061194f5761010080835404028352916020019161197a565b820191906000526020600020905b81548152906001019060200180831161195d57829003601f168201915b505050505081565b606061198d82612a82565b9050919050565b600b5481565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600034600180600c54611a919190614d93565b341015611ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aca906149c7565b60405180910390fd5b600e5481600b54611ae49190614cd5565b1115611b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1c90614907565b60405180910390fd5b611b33600954600a54612421565b9250336011600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600b5490508060126000868152602001908152602001600020819055506001600b54611bb59190614cd5565b600b81905550336014600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080847fb97343f1f2afc4959f818046ccae28fd7b05fcd2b7a7dc651cbb52a096cae03560405160405180910390a350505090565b611c49611e87565b73ffffffffffffffffffffffffffffffffffffffff16611c676114a0565b73ffffffffffffffffffffffffffffffffffffffff1614611cbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb490614ae7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d24906148c7565b60405180910390fd5b611d368161274d565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611e0457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611e145750611e1382612bd4565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611f028361125e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611f5382611e1b565b611f92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f89906149a7565b60405180910390fd5b6000611f9d8361125e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061200c57508373ffffffffffffffffffffffffffffffffffffffff16611ff484610a7a565b73ffffffffffffffffffffffffffffffffffffffff16145b8061201d575061201c81856119ea565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166120468261125e565b73ffffffffffffffffffffffffffffffffffffffff161461209c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209390614b07565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561210c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210390614927565b60405180910390fd5b612117838383612c3e565b612122600082611e8f565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121729190614ded565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121c99190614cd5565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60606000825114156122a55760405180602001604052806000815250905061241c565b6000604051806060016040528060408152602001615aa660409139905060006003600285516122d49190614cd5565b6122de9190614d62565b60046122ea9190614d93565b905060006020826122fb9190614cd5565b67ffffffffffffffff81111561233a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561236c5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b818310156123db576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050612380565b6003895106600181146123f5576002811461240557612410565b613d3d60f01b6002830352612410565b603d60f81b60018303525b50505050508093505050505b919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016124959291906147d7565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016124c293929190614763565b602060405180830381600087803b1580156124dc57600080fd5b505af11580156124f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125149190613cef565b506000612537846000306007600089815260200190815260200160002054612c43565b9050600160076000868152602001908152602001600020546125599190614cd5565b600760008681526020019081526020016000208190555061257a8482612c7f565b91505092915050565b6060600060017f0000000000000000000000000000000000000000000000000000000000000000846125b59190614fae565b6125bf9190614cd5565b90506125ea7f0000000000000000000000000000000000000000000000000000000000000000612cb2565b6126137f0000000000000000000000000000000000000000000000000000000000000000612cb2565b60405160200161262492919061461e565b604051602081830303815290604052915060005b818110156126b057600061267685836040516020016126589291906146a7565b6040516020818303038152906040528051906020012060001c612e87565b9050838160405160200161268b929190614514565b60405160208183030381529060405293505080806126a890614f51565b915050612638565b50816040516020016126c291906145b9565b604051602081830303815290604052915050919050565b6126e282611e1b565b612721576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271890614a47565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190612748929190613942565b505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006011600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006012600085815260200190815260200160002054905061286d82826130af565b82601360008381526020019081526020016000208190555082817fb0cfcf2a647f2022c1938bcab7524c61ba42b34db0270bbd562b9e632c128feb60405160405180910390a350505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612928576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291f90614947565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612a1991906147a1565b60405180910390a3505050565b612a31848484612026565b612a3d848484846130cd565b612a7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a73906148a7565b60405180910390fd5b50505050565b6060612a8d82611e1b565b612acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac390614aa7565b60405180910390fd5b6000600660008481526020019081526020016000208054612aec90614eee565b80601f0160208091040260200160405190810160405280929190818152602001828054612b1890614eee565b8015612b655780601f10612b3a57610100808354040283529160200191612b65565b820191906000526020600020905b815481529060010190602001808311612b4857829003601f168201915b505050505090506000612b76613264565b9050600081511415612b8c578192505050612bcf565b600082511115612bc1578082604051602001612ba9929190614514565b60405160208183030381529060405292505050612bcf565b612bca8461327b565b925050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b505050565b600084848484604051602001612c5c9493929190614800565b6040516020818303038152906040528051906020012060001c9050949350505050565b60008282604051602001612c949291906144d1565b60405160208183030381529060405280519060200120905092915050565b60606000821415612cfa576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612e82565b600082905060005b60008214612d2c578080612d1590614f51565b915050600a82612d259190614d62565b9150612d02565b60008167ffffffffffffffff811115612d6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612da05781602001600182028036833780820191505090505b50905060008290505b60008614612e7a57600181612dbe9190614ded565b90506000600a8088612dd09190614d62565b612dda9190614d93565b87612de59190614ded565b6030612df19190614d2b565b905060008160f81b905080848481518110612e35577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88612e719190614d62565b97505050612da9565b819450505050505b919050565b6060600060017f000000000000000000000000000000000000000000000000000000000000000084612eb99190614fae565b612ec39190614cd5565b90506040518060400160405280600981526020017f3c7061746820643d270000000000000000000000000000000000000000000000815250915060005b81811015612fa3576000612f6985837f0000000000000000000000000000000000000000000000000000000000000000612f3a9190614cd5565b604051602001612f4b9291906146a7565b6040516020818303038152906040528051906020012060001c613322565b90508381604051602001612f7e929190614514565b6040516020818303038152906040529350508080612f9b90614f51565b915050612f00565b5060006010808054905085612fb89190614fae565b81548110612fef577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001805461300490614eee565b80601f016020809104026020016040519081016040528092919081815260200182805461303090614eee565b801561307d5780601f106130525761010080835404028352916020019161307d565b820191906000526020600020905b81548152906001019060200180831161306057829003601f168201915b505050505090508281604051602001613097929190614538565b60405160208183030381529060405292505050919050565b6130c9828260405180602001604052806000815250613559565b5050565b60006130ee8473ffffffffffffffffffffffffffffffffffffffff166135b4565b15613257578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02613117611e87565b8786866040518563ffffffff1660e01b815260040161313994939291906146ee565b602060405180830381600087803b15801561315357600080fd5b505af192505050801561318457506040513d601f19601f820116820180604052508101906131819190613d7d565b60015b613207573d80600081146131b4576040519150601f19603f3d011682016040523d82523d6000602084013e6131b9565b606091505b506000815114156131ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131f6906148a7565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061325c565b600190505b949350505050565b606060405180602001604052806000815250905090565b606061328682611e1b565b6132c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132bc90614b27565b60405180910390fd5b60006132cf613264565b905060008151116132ef576040518060200160405280600081525061331a565b806132f9846135c7565b60405160200161330a929190614514565b6040516020818303038152906040525b915050919050565b6060600f8080549050836133369190614fae565b8154811061336d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001805461338290614eee565b80601f01602080910402602001604051908101604052809291908181526020018280546133ae90614eee565b80156133fb5780601f106133d0576101008083540402835291602001916133fb565b820191906000526020600020905b8154815290600101906020018083116133de57829003601f168201915b5050505050905060007f00000000000000000000000000000000000000000000000000000000000000008360027f00000000000000000000000000000000000000000000000000000000000000006134539190614d93565b604051602001613464929190614be2565b6040516020818303038152906040528051906020012060001c6134879190614fae565b905060007f000000000000000000000000000000000000000000000000000000000000000084600160027f00000000000000000000000000000000000000000000000000000000000000006134dc9190614d93565b6134e69190614cd5565b6040516020016134f7929190614be2565b6040516020818303038152906040528051906020012060001c61351a9190614fae565b90508261352683612cb2565b61352f83612cb2565b60405160200161354193929190614572565b60405160208183030381529060405292505050919050565b6135638383613774565b61357060008484846130cd565b6135af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135a6906148a7565b60405180910390fd5b505050565b600080823b905060008111915050919050565b6060600082141561360f576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061376f565b600082905060005b6000821461364157808061362a90614f51565b915050600a8261363a9190614d62565b9150613617565b60008167ffffffffffffffff811115613683577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156136b55781602001600182028036833780820191505090505b5090505b60008514613768576001826136ce9190614ded565b9150600a856136dd9190614fae565b60306136e99190614cd5565b60f81b818381518110613725577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856137619190614d62565b94506136b9565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156137e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137db90614a87565b60405180910390fd5b6137ed81611e1b565b1561382d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613824906148e7565b60405180910390fd5b61383960008383612c3e565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546138899190614cd5565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b82805461394e90614eee565b90600052602060002090601f01602090048101928261397057600085556139b7565b82601f1061398957805160ff19168380011785556139b7565b828001600101855582156139b7579182015b828111156139b657825182559160200191906001019061399b565b5b5090506139c491906139c8565b5090565b5b808211156139e15760008160009055506001016139c9565b5090565b60006139f86139f384614c30565b614c0b565b905082815260208101848484011115613a1057600080fd5b613a1b848285614eac565b509392505050565b6000613a36613a3184614c61565b614c0b565b905082815260208101848484011115613a4e57600080fd5b613a59848285614eac565b509392505050565b600081359050613a7081615a32565b92915050565b600081359050613a8581615a49565b92915050565b600081519050613a9a81615a49565b92915050565b600081359050613aaf81615a60565b92915050565b600081359050613ac481615a77565b92915050565b600081519050613ad981615a77565b92915050565b600082601f830112613af057600080fd5b8135613b008482602086016139e5565b91505092915050565b600082601f830112613b1a57600080fd5b8135613b2a848260208601613a23565b91505092915050565b600081359050613b4281615a8e565b92915050565b600060208284031215613b5a57600080fd5b6000613b6884828501613a61565b91505092915050565b60008060408385031215613b8457600080fd5b6000613b9285828601613a61565b9250506020613ba385828601613a61565b9150509250929050565b600080600060608486031215613bc257600080fd5b6000613bd086828701613a61565b9350506020613be186828701613a61565b9250506040613bf286828701613b33565b9150509250925092565b60008060008060808587031215613c1257600080fd5b6000613c2087828801613a61565b9450506020613c3187828801613a61565b9350506040613c4287828801613b33565b925050606085013567ffffffffffffffff811115613c5f57600080fd5b613c6b87828801613adf565b91505092959194509250565b60008060408385031215613c8a57600080fd5b6000613c9885828601613a61565b9250506020613ca985828601613a76565b9150509250929050565b60008060408385031215613cc657600080fd5b6000613cd485828601613a61565b9250506020613ce585828601613b33565b9150509250929050565b600060208284031215613d0157600080fd5b6000613d0f84828501613a8b565b91505092915050565b60008060408385031215613d2b57600080fd5b6000613d3985828601613aa0565b9250506020613d4a85828601613b33565b9150509250929050565b600060208284031215613d6657600080fd5b6000613d7484828501613ab5565b91505092915050565b600060208284031215613d8f57600080fd5b6000613d9d84828501613aca565b91505092915050565b600060208284031215613db857600080fd5b600082013567ffffffffffffffff811115613dd257600080fd5b613dde84828501613b09565b91505092915050565b600060208284031215613df957600080fd5b6000613e0784828501613b33565b91505092915050565b60008060408385031215613e2357600080fd5b6000613e3185828601613b33565b9250506020613e4285828601613b33565b9150509250929050565b613e5581614e21565b82525050565b613e6481614e33565b82525050565b613e7381614e3f565b82525050565b613e8a613e8582614e3f565b614f9a565b82525050565b6000613e9b82614c92565b613ea58185614ca8565b9350613eb5818560208601614ebb565b613ebe8161509b565b840191505092915050565b6000613ed482614c9d565b613ede8185614cb9565b9350613eee818560208601614ebb565b613ef78161509b565b840191505092915050565b6000613f0d82614c9d565b613f178185614cca565b9350613f27818560208601614ebb565b80840191505092915050565b6000613f40608183614cca565b9150613f4b826150ac565b608182019050919050565b6000613f63601483614cb9565b9150613f6e8261516d565b602082019050919050565b6000613f86600983614cca565b9150613f9182615196565b600982019050919050565b6000613fa9602583614cb9565b9150613fb4826151bf565b604082019050919050565b6000613fcc603283614cb9565b9150613fd78261520e565b604082019050919050565b6000613fef602683614cb9565b9150613ffa8261525d565b604082019050919050565b6000614012601c83614cb9565b915061401d826152ac565b602082019050919050565b6000614035601883614cb9565b9150614040826152d5565b602082019050919050565b6000614058602483614cb9565b9150614063826152fe565b604082019050919050565b600061407b601983614cb9565b91506140868261534d565b602082019050919050565b600061409e601783614cb9565b91506140a982615376565b602082019050919050565b60006140c1601e83614cb9565b91506140cc8261539f565b602082019050919050565b60006140e4602c83614cb9565b91506140ef826153c8565b604082019050919050565b6000614107601d83614cca565b915061411282615417565b601d82019050919050565b600061412a601283614cb9565b915061413582615440565b602082019050919050565b600061414d600183614cca565b915061415882615469565b600182019050919050565b6000614170600383614cca565b915061417b82615492565b600382019050919050565b6000614193603883614cb9565b915061419e826154bb565b604082019050919050565b60006141b6602a83614cb9565b91506141c18261550a565b604082019050919050565b60006141d9602983614cb9565b91506141e482615559565b604082019050919050565b60006141fc602e83614cb9565b9150614207826155a8565b604082019050919050565b600061421f600283614cca565b915061422a826155f7565b600282019050919050565b6000614242602d83614cb9565b915061424d82615620565b604082019050919050565b6000614265602083614cb9565b91506142708261566f565b602082019050919050565b6000614288603183614cb9565b915061429382615698565b604082019050919050565b60006142ab602c83614cb9565b91506142b6826156e7565b604082019050919050565b60006142ce602083614cb9565b91506142d982615736565b602082019050919050565b60006142f1602983614cb9565b91506142fc8261575f565b604082019050919050565b6000614314603083614cca565b915061431f826157ae565b603082019050919050565b6000614337602f83614cb9565b9150614342826157fd565b604082019050919050565b600061435a601f83614cb9565b91506143658261584c565b602082019050919050565b600061437d602183614cb9565b915061438882615875565b604082019050919050565b60006143a0601d83614cca565b91506143ab826158c4565b601d82019050919050565b60006143c3601d83614cca565b91506143ce826158ed565b601d82019050919050565b60006143e6603183614cb9565b91506143f182615916565b604082019050919050565b6000614409600283614cca565b915061441482615965565b600282019050919050565b600061442c600683614cca565b91506144378261598e565b600682019050919050565b600061444f601a83614cca565b915061445a826159b7565b601a82019050919050565b6000614472600983614cca565b915061447d826159e0565b600982019050919050565b6000614495601e83614cb9565b91506144a082615a09565b602082019050919050565b6144b481614e95565b82525050565b6144cb6144c682614e95565b614fa4565b82525050565b60006144dd8285613e79565b6020820191506144ed82846144ba565b6020820191508190509392505050565b60006145098284613f02565b915081905092915050565b60006145208285613f02565b915061452c8284613f02565b91508190509392505050565b60006145448285613f02565b915061454f826140fa565b915061455b8284613f02565b915061456682614163565b91508190509392505050565b600061457e8286613f02565b915061458982614140565b91506145958285613f02565b91506145a082614140565b91506145ac8284613f02565b9150819050949350505050565b60006145c58284613f02565b91506145d08261441f565b915081905092915050565b60006145e682613f79565b91506145f182614393565b91506145fc82613f33565b91506146088284613f02565b915061461382614212565b915081905092915050565b600061462982614307565b91506146358285613f02565b915061464082614465565b915061464c8284613f02565b9150614657826143fc565b91508190509392505050565b600061466e826143b6565b915061467a8284613f02565b915081905092915050565b600061469082614442565b915061469c8284613f02565b915081905092915050565b60006146b382856144ba565b6020820191506146c382846144ba565b6020820191508190509392505050565b60006020820190506146e86000830184613e4c565b92915050565b60006080820190506147036000830187613e4c565b6147106020830186613e4c565b61471d60408301856144ab565b818103606083015261472f8184613e90565b905095945050505050565b600060408201905061474f6000830185613e4c565b61475c60208301846144ab565b9392505050565b60006060820190506147786000830186613e4c565b61478560208301856144ab565b81810360408301526147978184613e90565b9050949350505050565b60006020820190506147b66000830184613e5b565b92915050565b60006020820190506147d16000830184613e6a565b92915050565b60006040820190506147ec6000830185613e6a565b6147f960208301846144ab565b9392505050565b60006080820190506148156000830187613e6a565b61482260208301866144ab565b61482f6040830185613e4c565b61483c60608301846144ab565b95945050505050565b6000602082019050818103600083015261485f8184613ec9565b905092915050565b6000602082019050818103600083015261488081613f56565b9050919050565b600060208201905081810360008301526148a081613f9c565b9050919050565b600060208201905081810360008301526148c081613fbf565b9050919050565b600060208201905081810360008301526148e081613fe2565b9050919050565b6000602082019050818103600083015261490081614005565b9050919050565b6000602082019050818103600083015261492081614028565b9050919050565b600060208201905081810360008301526149408161404b565b9050919050565b600060208201905081810360008301526149608161406e565b9050919050565b6000602082019050818103600083015261498081614091565b9050919050565b600060208201905081810360008301526149a0816140b4565b9050919050565b600060208201905081810360008301526149c0816140d7565b9050919050565b600060208201905081810360008301526149e08161411d565b9050919050565b60006020820190508181036000830152614a0081614186565b9050919050565b60006020820190508181036000830152614a20816141a9565b9050919050565b60006020820190508181036000830152614a40816141cc565b9050919050565b60006020820190508181036000830152614a60816141ef565b9050919050565b60006020820190508181036000830152614a8081614235565b9050919050565b60006020820190508181036000830152614aa081614258565b9050919050565b60006020820190508181036000830152614ac08161427b565b9050919050565b60006020820190508181036000830152614ae08161429e565b9050919050565b60006020820190508181036000830152614b00816142c1565b9050919050565b60006020820190508181036000830152614b20816142e4565b9050919050565b60006020820190508181036000830152614b408161432a565b9050919050565b60006020820190508181036000830152614b608161434d565b9050919050565b60006020820190508181036000830152614b8081614370565b9050919050565b60006020820190508181036000830152614ba0816143d9565b9050919050565b60006020820190508181036000830152614bc081614488565b9050919050565b6000602082019050614bdc60008301846144ab565b92915050565b6000604082019050614bf760008301856144ab565b614c0460208301846144ab565b9392505050565b6000614c15614c26565b9050614c218282614f20565b919050565b6000604051905090565b600067ffffffffffffffff821115614c4b57614c4a61506c565b5b614c548261509b565b9050602081019050919050565b600067ffffffffffffffff821115614c7c57614c7b61506c565b5b614c858261509b565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614ce082614e95565b9150614ceb83614e95565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614d2057614d1f614fdf565b5b828201905092915050565b6000614d3682614e9f565b9150614d4183614e9f565b92508260ff03821115614d5757614d56614fdf565b5b828201905092915050565b6000614d6d82614e95565b9150614d7883614e95565b925082614d8857614d8761500e565b5b828204905092915050565b6000614d9e82614e95565b9150614da983614e95565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614de257614de1614fdf565b5b828202905092915050565b6000614df882614e95565b9150614e0383614e95565b925082821015614e1657614e15614fdf565b5b828203905092915050565b6000614e2c82614e75565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614ed9578082015181840152602081019050614ebe565b83811115614ee8576000848401525b50505050565b60006002820490506001821680614f0657607f821691505b60208210811415614f1a57614f1961503d565b5b50919050565b614f298261509b565b810181811067ffffffffffffffff82111715614f4857614f4761506c565b5b80604052505050565b6000614f5c82614e95565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614f8f57614f8e614fdf565b5b600182019050919050565b6000819050919050565b6000819050919050565b6000614fb982614e95565b9150614fc483614e95565b925082614fd457614fd361500e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f222c20226465736372697074696f6e223a22416e204e4654206261736564206f60008201527f6e20616e205356472074686174207761732067656e6572617465642072616e6460208201527f6f6d6c792077697468207468652068656c70206f6620436861696e4c696e6b2060408201527f56524621222c202261747472696275746573223a22222c2022696d616765223a60608201527f2200000000000000000000000000000000000000000000000000000000000000608082015250565b7f746f6b656e4964206973206e6f742076616c6964000000000000000000000000600082015250565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b7f4f6e6c792074686520726563697069656e742063616e2066696e697368206d6960008201527f6e74696e67000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f43616e6e6f7420657863656564206d617820616d6f756e740000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f746f6b656e55524920697320616c726561647920736574000000000000000000600082015250565b7f6e65656420746f207761697420666f7220436861696e4c696e6b205652460000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f272066696c6c3d277472616e73706172656e7427207374726f6b653d27000000600082015250565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b7f272f3e0000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f6c617374546f6b656e4964206d7573742062652067726561746572207468616e60008201527f206669727374546f6b656e496400000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f3c73766720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323060008201527f30302f73766727206865696768743d2700000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f52616e646f6d2047656e657261746564204f6e2d436861696e20535647000000600082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f273e000000000000000000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b7f272077696474683d270000000000000000000000000000000000000000000000600082015250565b7f496e76616c6964204d696e74204261746368204d696e7420416d6f756e740000600082015250565b615a3b81614e21565b8114615a4657600080fd5b50565b615a5281614e33565b8114615a5d57600080fd5b50565b615a6981614e3f565b8114615a7457600080fd5b50565b615a8081614e49565b8114615a8b57600080fd5b50565b615a9781614e95565b8114615aa257600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122083b0582ef0fdbf2e1320aba16827dab61855c5d9ea1188262618402f30da471164736f6c63430008020033",
  "devdoc": {
    "events": {
      "requestedRandomSVG(bytes32,uint256)": {
        "details": "indexed values are treated as log topics instead of raw data.Allows you to search for specific events rather than parsing the entire log."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "details": "Constructor",
        "params": {
          "_LinkToken": "address of the Link token",
          "_VRFCoordinator": "address of the VRF coordinator",
          "_fee": "uint256 ",
          "_keyHash": "bytes32 "
        }
      },
      "create()": {
        "details": "Requests ChainLink VRF number and maps the id Technically this is the NFT"
      },
      "createtBatch(uint256)": {
        "details": "Mint multiple NFTs Can potentially be optimized with ERC721A but this contract is already at its size limit"
      },
      "finishMint(uint256)": {
        "details": "Savs generated SVG info to the blockchain",
        "params": {
          "_tokenId": "Token ID Requires:    - tokenId is a valid token ID   - tokenIdToRandomNumber[tokenId] is a valid random number   - tokenCounter is greater than tokenId"
        }
      },
      "formatTokenURI(string)": {
        "details": "Converts image URI to token URI",
        "params": {
          "imageURI": "image URI string"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "ERC2981 Royalty Token Interface",
        "params": {
          "_salePrice": "uint256 Sale price",
          "_tokenId": "uint256 Token ID"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "svgToImageURI(string)": {
        "details": "Converts SVG to image URI with base64 encoding",
        "params": {
          "svg": "SVG string"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw()": {
        "details": "allows the owner to withdraw funds"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setVRFFee(uint256)": {
        "notice": "Function to handle changing the VRF coordinator fee"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 418,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 424,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 428,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 432,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 438,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1370,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 79,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "nonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 273,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2202,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "keyHash",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 2204,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "fee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2206,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2209,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "price",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2211,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "_recipient",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 2214,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "maxAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2229,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "pathCommands",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2241,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "colors",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2245,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "requestIdToSender",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2249,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "requestIdToTokenId",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2253,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "tokenIdToRandomNumber",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2257,
        "contract": "contracts/RandomOnChainSVG.sol:RandomOnChainSVG",
        "label": "tokenIdToRecipient",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}